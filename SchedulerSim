import java.util.*;

public class SchedulerSim {
   // currentTime
   static int ctime = 0;
   // completedProcesses
   static int pCount = 0;   
   // 'totalWait'
   static int totalWaitTime = 0;
   // 'totalTurnaround'
   static int totalTurnaroundTime = 0;
    //'contextSwitchTime'
   static final int switchTime = 1;
   //'ganttChart' 
   static List<String> timeline = new ArrayList<>();
   
   // Define Process class
   static class Process {
       int id;
       int arrivalTime;
       int burstTime;
       int remainingTime;
       int startTime = -1;
       int completionTime = -1;
       
       public Process(int id, int arrivalTime, int burstTime) {
           this.id = id;
           this.arrivalTime = arrivalTime;
           this.burstTime = burstTime;
           this.remainingTime = burstTime;
       }
   }

   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      System.out.print("Enter the number of processes: ");
      int numProcs = sc.nextInt();
      
      List<Process> processes = new ArrayList<>();
      for (int i = 0; i < numProcs; i++) {
        System.out.print("Enter arrival time and burst time for Process P" + (i + 1) + ": "); // to change print format
         int arrivalTime = sc.nextInt();
         int burstTime = sc.nextInt();
         processes.add(new Process(i, arrivalTime, burstTime));
      }
   
      System.out.println("\nNumber of processes = " + numProcs);
      //new 
       System.out.print("("); // to print the opening parenthesis at the begining 

       for(int i=1 ; i<= numProcs; i++){
         System.out.print("P" + i);

       if (i<numProcs) // to make sure, there's no comma after the last process
       System.out.print(",");
       }// end of the loop

       System.out.println(")");
       //end of the new part 

      for (Process p : processes) {
         System.out.println("P" + (p.id + 1) + ": Arrival time = " + p.arrivalTime + ", Burst time = " + p.burstTime + " ms");
      }
      System.out.println("\nScheduling Algorithm: Shortest Remaining Time First");
      System.out.println("Context Switch: 1ms");
      executeScheduler(processes, numProcs);
   }

   public static void executeScheduler(List<Process> processes, int numProcs) {
      int currentProcess = -1;
      int startTime = -1;

      while (pCount < numProcs) {
          int selectedProc = pickProcess(processes, numProcs);

          if (selectedProc != -1) {
              if (selectedProc != currentProcess) {
                  if (currentProcess != -1) {
                      timeline.add(startTime + "-" + ctime + "":         P" + (currentProcess + 1));
                  }
                  if (!timeline.isEmpty() && !timeline.get(timeline.size() - 1).endsWith("CS")) {
                      timeline.add(ctime + "-" + (ctime + switchTime) + "":         CS");
                      ctime += switchTime; 
                  }
                  currentProcess = selectedProc;
                  startTime = ctime;
              }

              recordStart(processes.get(selectedProc));
              processes.get(selectedProc).remainingTime--;
              ctime++;

              if (processes.get(selectedProc).remainingTime == 0) {
                  processes.get(selectedProc).completionTime = ctime;
                  pCount++;
                  timeline.add(startTime + "-" + ctime + "":         P" + (selectedProc + 1));
                  currentProcess = -1;
              }
          } else {
              ctime++;
          }
      }

      computeMetrics(processes, numProcs);
      showResults(timeline, numProcs);
   }

   public static int pickProcess(List<Process> processes, int numProcs) {
      int selected = -1;
      int shortest = Integer.MAX_VALUE;
      
      for (int i = 0; i < numProcs; i++) {
         Process p = processes.get(i);
         if (p.remainingTime > 0 && p.arrivalTime <= ctime) {
            if (p.remainingTime < shortest || (p.remainingTime == shortest && p.arrivalTime < processes.get(selected).arrivalTime)) {
               shortest = p.remainingTime;
               selected = i;
            }
         }
      }
      return selected;
   }

   public static void recordStart(Process process) {
      if (process.startTime == -1) {
         process.startTime = ctime;
      }
   }

   public static void computeMetrics(List<Process> processes, int numProcs) {
      for (Process p : processes) {
         int turnaroundTime = p.completionTime - p.arrivalTime;
         int waitTime = turnaroundTime - p.burstTime;
         totalTurnaroundTime += turnaroundTime;
         totalWaitTime += waitTime;
      }
   }

   public static void showResults(List<String> timeline, int numProcs) {
      System.out.printf("%-10s %s\n", "Time", "Process/CS");
      for (String entry : timeline) {
         System.out.println(entry);
      }

      int avgTurnaround = totalTurnaroundTime / numProcs;
      double avgWaitTime = (double) totalWaitTime / numProcs;
      double cpuUtil = ((double) (ctime - (pCount * switchTime)) / ctime) * 100;

      System.out.println("\nPerformance Metrics:");
      System.out.println("Average Turnaround Time: " + avgTurnaround);
      System.out.println("Average Waiting Time: " + avgWaitTime);
      System.out.println("CPU Utilization: " + String.format("%.2f", cpuUtil));
   }
}
